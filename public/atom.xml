<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karthik Hariharan]]></title>
  <link href="http://hkarthik.me/atom.xml" rel="self"/>
  <link href="http://hkarthik.me/"/>
  <updated>2011-11-14T10:06:12-06:00</updated>
  <id>http://hkarthik.me/</id>
  <author>
    <name><![CDATA[Karthik Hariharan]]></name>
    <email><![CDATA[kar.hariharan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Reasons for Leaving .NET]]></title>
    <link href="http://hkarthik.me/blog/2011/11/11/my-reasons-for-leaving-net/"/>
    <updated>2011-11-11T21:00:00-06:00</updated>
    <id>http://hkarthik.me/blog/2011/11/11/my-reasons-for-leaving-net</id>
    <content type="html"><![CDATA[<p>My current gig at Pure Charity is my first developer
role where the technical environment is not .NET. After 6 years of .NET
development work, I&#8217;ve decided to leave .NET and work in Ruby. My reasons
for making this change were largely technical but also reflected a
change in attitude about building software. This post will be an in
depth explanation of my reasons for leaving .NET.</p>

<h2>Back to Unix</h2>

<p>Working with Ruby on a day to day basis has rekindled my love for Unix.</p>

<p>The philosophy of Unix is usually summarized as:</p>

<blockquote><p>Write programs that do one thing and do it well.</p></blockquote>

<p>This concept really identifies with how I think about software that I
write and what makes my favorite software tools so great.</p>

<p>In college, most of my programming work was done on on Unix based systems.
While much has stayed the same on the Unix side in the last decade, my toolset has changed slightly.
Where I used to use Solaris/Linux, Emacs, and Bash, these days I use OSX, Vim, and Zsh, respectively.</p>

<p>Coming back to Unix was a big change from the Visual Studio focused
Windows development environment that I had used for the past 6 years.
But after a few months, I feel more productive than ever.</p>

<h2>Embracing Git</h2>

<p>Git has become one of my favorite software tools. While some may think of it
as just source control, for me it represents a different approach
to distributed work, experimentation, and simplicity around source code.</p>

<p>Combined with the use of GitHub as a collaborative tool, Git has simplified my entire workflow around
writing code, reviewing other people&#8217;s code, and utilizing Open Source.</p>

<p>Most of the Enterprise tools that the vast majority of .NET shops use to accomplish these things come with far too
much friction for my tastes. This friction leads to lots of wasted time,
more bugs, and lots of general frustration among the Agile teams that I&#8217;ve
worked with in the past.</p>

<h2>Switching to the Mac</h2>

<p>I purchased my first Mac in 2009 and I have found the hardware and the software
on the Mac to be simple, elegant, and easy to use.</p>

<p>The single big benefit to the Mac is that beneath the flashy hood, it&#8217;s a
powerful Unix-based OS and can utilize all the tooling and libraries
that Unix developers have used for decades. Coupled with the power of Unix and the
ability to run familar software with the GUI or through virtualization, there&#8217;s little reason for any developer to not consider moving to the
Mac.</p>

<p>Another benefit that I have found with the Mac is that it requires far less baby-sitting of the Operating System in the way of
driver updates, OS updates, and general system administration. By
simplifying all of these tasks, the Mac has allowed me to focus more on consuming and
creating content rather than constantly tweaking my OS or worrying about
the latest update.</p>

<p>While some enjoy the tweaking, as I did in the past, I no longer enjoy spending my time that way. I now prefer
my OS to stay out of my way so I can focus on perfecting my craft
and building things.</p>

<h2>Deploying to the Linux based Cloud</h2>

<p>Many companies today are starting to move away from self hosted infrastructure and are instead deploying to Amazon EC2 or to other cloud
based hosting providers. Such public clouds are built on top of the
virtualization layers and foundations provided by Linux.</p>

<p>Unix based Operating Systems provide far more system level
configuration, setup, and automation via the shell. These types of administrative tasks most often
are done via GUIs in Windows, making things more inefficient by
requiring more dedicated personnel to manage environments.</p>

<p>With Azure and other efforts, Microsoft is making efforts to address these short comings with Windows Server. But to me it makes
little sense to pay exorbitant license fees for immature and less elegant solutions
to manage cloud-based server infrastructure.</p>

<h2>Joining the Ruby Community</h2>

<p>I&#8217;ve always admired the Ruby community and the hacker focused culture around it.
Open Source is at the heart of this community and reputations are built upon significant open
source contributions. You&#8217;d be hard pressed to find a Rubyist speaker who
doesn&#8217;t put their code out there for the world to see and critique. This
makes the whole community feel more genuine.</p>

<p>The Ruby conference talks are more often in a show and tell format. Rarely
do I feel that the speaker is attempting to sell me on something or
further their personal branding. The .NET community tends to have a
strong vendor focus along with lots of self promotion at the speaker
level. It&#8217;s been refreshing to see less of this in the Ruby community.</p>

<p>The Ruby community also feels more self sufficient than the .NET community, since Rubyists don&#8217;t
look to a vendor to direct their technology stack. Many .NET developers
will not approach a technology unless there is a Microsoft flavor of
said technology, even if it is the poorer choice compared to mature open source offerings.
There are countless examples of this over the last decade, and I expect to see countless more.</p>

<h2>Working at Startups</h2>

<p>After a few years of working with Enterprise Software companies, I realized that I&#8217;m better
suited to work with startups. I prefer new product development over
legacy software maintenance, and it&#8217;s very difficult to find such opportunities inside traditional
Enterprises without political maneuvering and a lot of luck.</p>

<p>In a startup, there is usually a lot more room for an individual to
experiment and take ownership of an idea without getting too deep into
internal politics and bureaucracy.</p>

<p>Unfortunately, startups are less likely to use .NET technologies due to its higher costs. To be fair, Microsoft has
made efforts to reduce costs for startups through the Bizspark program. But after 3 years, a startup is still subject to
very high licensing costs and has to strategically plan to pay for them or migrate off .NET. Given the choice, I don&#8217;t know many startup
founders that would choose .NET for new ventures today.</p>

<p>Additionally, there is a perception that .NET developers are too specialized
to be effective generalists. Since I specialized in .NET for the past 6 years, this severely limited my
options when seeking to work with startups.</p>

<h2>Specialization is for Insects</h2>

<p>My journey away from Windows and .NET has been around 2 years in the
making, beginning with my purchasing a Mac and making a concerted effort
to build a product using Ruby on Rails.</p>

<p>It&#8217;s been a long and hard road to get here, but I received a lot of support from my friends
and former coworkers who similarly left .NET recently. For their help, I am eternally grateful.</p>

<p>I&#8217;ve definitely had to make sacrifices to get here, including a loss of
seniority, but I&#8217;m confident that I made the right choice and that these
sacrifices will be well worth it in the long run.</p>

<p>In the future, rather than specialize solely in Ruby, I&#8217;ve
chosen to grow more as a generalist developer. In the coming years, I&#8217;m looking
to tackle other technologies like Node.js, Scala, Clojure, iOS, and
Android.</p>

<p>I don&#8217;t regret my time in .NET, as I made lots of wonderful friends and
got the chance to work with some very smart folks. But it&#8217;s
time to move on to other things. I look forward to sharing more of my
journey with you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Fresh Start on a Static Site]]></title>
    <link href="http://hkarthik.me/blog/2011/11/06/a-fresh-start-on-a-static-site/"/>
    <updated>2011-11-06T10:18:00-06:00</updated>
    <id>http://hkarthik.me/blog/2011/11/06/a-fresh-start-on-a-static-site</id>
    <content type="html"><![CDATA[<p>I&#8217;ve decided to move my blog to a new domain and use a static site
generator to serve up the content. Since the content doesn&#8217;t change
much, it makes little sense to continue using Wordpress on a shared
web hosting plan with limited resources.</p>

<h2>Static Sites Are Fast</h2>

<p>A static site significantly reduces the overhead of disk I/O by
taking the relational database out of the picture. Most modern web
servers can be highly tuned to avoid disk access for static content by
utilizing output caching. If setup correctly, the fast majority
of web requests require zero disk I/O. This allows the web server to
serve content faster and handle larger loads with less resources.</p>

<p>While it is possible to use Wordpress Plugins like SuperCache to reduce
disk I/O, it still requires a Fast CGI process to serve the content via
PHP. This incurs enough CPU usage to make it slower than a pure static site.</p>

<h2>Easy cloud based hosting and scaling</h2>

<p>While a typical shared hosting setup works most of the time, it
does carry the possibility of a popular post bringing your hosting
to its knees. Planning for this kind of event carries a lot of
cost which will go unused most of the time.</p>

<p>Cloud based hosting platforms, like <a href="http://www.heroku.com">Heroku</a>,
are perfectly suited for hosting static sites that can be scaled up very easily.
Heroku&#8217;s free plan goes a long way and would likely handle the vast majority of
traffic, but still give you the ability to use push button scaling for those rare
instances when a post hits the #1 page of <a href="http://news.ycombinator.com">Hacker News</a>.</p>

<h2>Choosing a static site generator</h2>

<p>There a number of static site generators that will perform the basic
operations of translating posts that are written in
<a href="http://daringfireball.net/projects/markdown/">Markdown</a>
into HTML and organizing the output along with any uploaded media.</p>

<p>I chose to go with <a href="http://octopress.org">Octopress</a> because it
offered the following:</p>

<ul>
<li>Ruby based and easily customizable with plugins.</li>
<li>Easily configured to work with Heroku.</li>
<li>Stylesheets are written in <a href="http://thesassway.com/">Sass</a>.</li>
<li>Excellent typography out of the box with the base theme.</li>
<li>Sits on top of <a href="http://github.com/mojombo/jekyll">Jekyll</a>, and
can utilize many existing plugins.</li>
<li>Easy local preview with a built in Rack server.</li>
</ul>


<h2>Migrating old content</h2>

<p>I&#8217;ve chosen to move my old wordpress install over to wordpress.com&#8217;s
free plan for archival purposes rather than attempt a content migration.
But if you want to preserve your old content and links, there is a
Wordpress to Jekyll migrating tool called
<a href="http://github.com/thomasf/exitwp">ExitWP</a> that many have used
successfully. Also, you can utilize a rack server to execute code to handle redirects.</p>

<h2>Additional Resources</h2>

<ul>
<li><a href="http://inessential.com/2011/03/16/a_plea_for_baked_weblogs">A plea for baked weblogs</a></li>
<li><a href="http://mattgemmell.com/2011/09/12/blogging-with-octopress/">Matt Gemmell&#8217;s post on blogging with Octopress</a></li>
<li><a href="http://www.scottw.com/moving-to-octopress">Scott Watermasysk&#8217;s post on Octopress with Heroku</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
