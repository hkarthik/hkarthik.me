<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Karthik Hariharan]]></title>
  <link href="http://hkarthik.me/atom.xml" rel="self"/>
  <link href="http://hkarthik.me/"/>
  <updated>2011-12-13T12:10:33-06:00</updated>
  <id>http://hkarthik.me/</id>
  <author>
    <name><![CDATA[Karthik Hariharan]]></name>
    <email><![CDATA[kar.hariharan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beating the Talent Crunch With a Distributed Team]]></title>
    <link href="http://hkarthik.me/blog/2011/12/12/beating-the-talent-crunch-with-a-distributed-team/"/>
    <updated>2011-12-12T19:05:00-06:00</updated>
    <id>http://hkarthik.me/blog/2011/12/12/beating-the-talent-crunch-with-a-distributed-team</id>
    <content type="html"><![CDATA[<p>There&#8217;s been a lot of press lately about the severe shortage of software
engineers across the country. I have been involved in hiring engineers in
multiple companies over the past few years and I&#8217;ve seen a steady
shrinking and dispersion of the available talent pool. I believe
that the only solution to the talent crunch in the short term is to build
and grow distributed teams.</p>

<p>After working closely with successful distributed teams in the past, I
became aware of how well they work when grown carefully. To that end,
I sought out a role with a distributed team to learn how they operate and
utilize these skills to help build and lead teams in the future.</p>

<p>This post is to share some of what I&#8217;ve observed and learned after 6
months of working in a distributed team at <a href="http://purecharity.com">Pure Charity</a>.</p>

<h2>Distributed Hiring</h2>

<p>Hiring members of a distributed team is not all that different from
hiring a colocated team. Here are some core guidelines.</p>

<ul>
<li>Focus on internal referrals from active team members.</li>
<li>If your internal referrals run dry, reach out to the larger community.</li>
<li>Look at actual code via OSS contributions or code snippets they share.</li>
<li>Spend a day pair programming remotely on a real world problem to see how they
fit in with the existing team.</li>
<li>Try to keep everyone within a single timezone.</li>
</ul>


<p>Everyone knows a weak link hurts the whole team, but in a distributed
team, it can hurt even more. The good news is, you have a wider talent
pool to work with and can afford to be a bit pickier with whom you hire
to mitigate this risk.</p>

<h2>The Chatroom</h2>

<p>The team chatroom provides a number of advantages. Here are a few.</p>

<ul>
<li>A common communication area where team members can get rapid feedback
and bounce ideas around.</li>
<li>A focused area for private messaging without the noise of typical IM
networks.</li>
<li>A watercooler for the random banter that builds camaraderie among
teams.</li>
<li>Relief from the constant flood of email.</li>
</ul>


<p>The last point is very important. Since working in a distributed team,
my email volume has dropped significantly and I don&#8217;t have to spend much
time managing my inbox to stay on top. That has been invaluable.</p>

<p>There a number of products, aside from the standard IRC, that can host
the chatroom. My favorite is <a href="http://hipchat.com">HipChat</a>, but many
teams use <a href="http://campfirenow.com">Campfire</a>. I like the hosted services
since they can parse code, share files, embed images/video,
and log conversations. Plus, they are a lot of fun when you add a
<a href="http://hubot.github.com">Hubot</a>.</p>

<h2>Audio Conferencing</h2>

<p>When ideas are not easily communicated via IM, email, or the
Chatroom, it&#8217;s best to hold an audio conversation. There are a number of
solutions to this but I suggest the following guidelines:</p>

<ul>
<li>Choose one that runs on low bandwidth networks with good audio quality.</li>
<li>Everyone on the team should use the same product.</li>
<li>Have everyone stay online as much as possible during the work day.</li>
</ul>


<p>Our team, being composed entirely of Mac users, uses iChat to quickly have push button audio
communication within small groups. Many other teams use Skype. Choose
what you like, but make sure everyone uses the same thing and it remains
frictionless.</p>

<h2>Video Conferencing</h2>

<p>A robust video conferencing solution is essential to help team members
hold both regular meetings and ad-hoc touch points. The things to look for here are:</p>

<ul>
<li>Good cross platform support.</li>
<li>Excellent audio and video quality for multiple participants.</li>
<li>The ability to quickly let participants share their screen.</li>
</ul>


<p>My favorite tool for this is GoToMeeting, but many teams
use WebEx, Skype, or free products for this. The better solutions come at a
premium price, but it&#8217;s well worth it. Regular face time over video
conferencing helps the team gel better.</p>

<h2>Remote Pair Programming</h2>

<p>A great way to help development teams stay focused and productive is to give them the right
tools for pair programming. In our team, nearly everyone is comfortable
using Vim as their editor. With the combination of Tmux + Vim, team
members can remotely pair program and control a single shared terminal
session. In this termimal session, everyone has keyboard control on a low bandwidth
connection. This is extremely useful when pair programming or mentoring more junior developers.</p>

<p>If your development environment really requires the use of an
IDE, I have heard good things about using <a href="http://www.teamviewer.com">TeamViewer</a> as an alternative.</p>

<h2>The Workstream</h2>

<p>This suggestion may be a little controversial, but I suggest having every team
member keep a running log of what they work on during the day. When you&#8217;re working in a
distributed team, it&#8217;s easy to lose track of what each team member is
working on. While you can always IM or make calls, it&#8217;s far less
intrusive to glance at the workstream to get a heartbeat on the team&#8217;s
progress.</p>

<p>In addition, the workstream provides the whole team with transparency and
helps keep everyone focused. You can more easily see if someone is spinning their
wheels and help them get unstuck long before they have to ask. This helps a lot with
onboarding and ramping up new team members without making them feel
too micro-managed. Also, it helps build an environment of mutual trust and
understanding.</p>

<p>We use <a href="http://coopapp.com">Coopapp</a> and <a href="http://harvesthq.com">Harvest</a> to have team members track their work hours along
with any paid time off.</p>

<p>If tracking time feels a little too intrusive to you, I recommend using <a href="http://yammer.com">Yammer</a> and having
your team provide micro-updates periodically.</p>

<h2>Don&#8217;t Cross the Streams</h2>

<p>One of the biggest areas where I see companies go wrong is mixing remote
team members with colocated members. Nothing sucks more than being the
one guy on the phone in a room full of colocated developers. It can be isolating,
frustrating, and terribly unproductive for everyone involved.</p>

<p>If you&#8217;ve already got a colocated team, the best thing you can do is
hire more colocated team members. If you&#8217;re struggling to hire locally,
then hire two or more remote workers that have worked together
previously to seed a distributed team. Keep their work separate from
that of your colocated team. Or let some of your colocated team members
work from home to help seed the distributed team.</p>

<h2>Plan for Face Time</h2>

<p>At least once a quarter, plan on getting everyone together in one
physical location for a few days of work, along with a night or two out. Such
sessions will be highly effective and the evenings are great for team building. During
the day, set a clear agenda and try to stick to it.</p>

<h2>Final Thoughts</h2>

<p>Distributed teams definitely come with certain challenges, and it&#8217;s
critical to keep the teams small to minimize the communication difficulties. Many companies
like 37signals, GitHub, and Living Social have all used these
strategies effectively to build a remote workforce so there&#8217;s no reason
it can&#8217;t work for you too. If you have thoughts or experiences to share,
please do so in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Open Source Workflow With Ruby on Rails]]></title>
    <link href="http://hkarthik.me/blog/2011/11/21/an-open-source-workflow-with-ruby-on-rails/"/>
    <updated>2011-11-21T09:21:00-06:00</updated>
    <id>http://hkarthik.me/blog/2011/11/21/an-open-source-workflow-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been an advocate of open source for a long time. First via software
that I used, like Mozilla&#8217;s Firefox, and later though consuming open
source code and contributing back to it. I&#8217;ve used open source code on a
number of platforms over the years including PHP, Java, .NET, and Ruby on Rails.</p>

<p>Out of the platforms that I have used, I believe Rails has the most accesible open
source ecosystem because it enables consumption and contribution better than most other platforms.</p>

<p>This post will be my attempt at describing a developer&#8217;s work flow when using open source with Ruby on Rails.</p>

<h2>Discovery</h2>

<p>The first step to consuming open source to use on a Rails project is
discover existing open source libraries, called gems in Ruby, to
solve a problem that you encounter while building your application.</p>

<p>There are number of screencast sites, podcasts, and
mailing lists out there that highlight useful gems and how to use them.
Here&#8217;s a few that I use:</p>

<ul>
<li>Ryan Bates&#8217; Screencasts at <a href="http://railscasts.com">Railscasts</a></li>
<li><a href="http://ruby5.envylabs.com">Ruby 5 Podcast</a></li>
<li>Peter Cooper&#8217;s <a href="http://rubyweekly.com">Ruby Weekly</a></li>
</ul>


<p>Most gems are hosted via <a href="http://rubygems.org">RubyGems.org</a>. This site also maintains a search index
with links to source and documentation for any gems
hosted there.</p>

<p><a href="http://github.com">GitHub</a> is also a good place to discover gems via search.</p>

<p>Some key criteria that I look for in a gem that I&#8217;m considering for use in a production
application are the following:</p>

<ul>
<li>Publically Hosted on GitHub</li>
<li>Recent commits within the last 3 months</li>
<li>A high number of Forks/Watchers</li>
<li>A low number of currently open Pull Requests.</li>
</ul>


<p>These are just my personal guidelines, so feel free to relax them as you see fit. For side projects to hack on,
you can (and should) be a lot more willing to try more experimental gems.</p>

<h2>Installing Gems with Bundler</h2>

<p>Once you&#8217;ve identified a few gems that you&#8217;d like to use, the standard
recommendation is to use <a href="http://gembundler.com">Bundler</a> to manage your external gems.</p>

<p>Bunder is a dependency management gem that uses a manifest file
called a GemFile that lists out the gems in the root of your project.</p>

<p>To add a dependency in the simplest way, edit your Gemfile
and add a line similar the following line to add the Carrier Wave gem.</p>

<figure class='code'><figcaption><span>GemFile for Carrier Wave</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&#8217;ve updated your Gemfile, run &#8216;bundle install&#8217; to have Bundler
pull down your gems and install them for use in your app.</p>

<h2>Adjusting your versions</h2>

<p>In the course of using your gem, you may find that you need to use a
different version than the current version published on RubyGems.org.</p>

<p>To go back to an older published version of the gem, you can adjust your Gemfile
like below.</p>

<figure class='code'><figcaption><span>GemFile for Carrier Wave with version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="s1">&#39;0.5.4&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After updating your GemFile, run &#8216;bundle update <gemname>&#8217; to force
Bundler to reinstall the gem using the correct version.</p>

<p>If you&#8217;re feeling more adventurous, or simply want to test the most
current code for the gem with your app, you can point directly to its
public git repository by putting this in your GemFile.</p>

<figure class='code'><figcaption><span>GemFile with git repo here.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/jnicklas/carrierwave.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, if you&#8217;ve cloned the gem&#8217;s source code locally, you can point to a local directory for
the gem here.</p>

<figure class='code'><figcaption><span>GemFile with local directory here.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;~/Projects/carrierwave/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Forking to fix</h2>

<p>If you find that the gem you are using contains a bug, and the gem&#8217;s
code is on GitHub, it&#8217;s very easy to attempt a bug fix and test it locally in
your application.</p>

<p>The first step is to fork the gem&#8217;s repository using your GitHub
account.</p>

<p><img src="http://f.cl.ly/items/2Q1V0I160h3J241b2Q2B/jnicklas_carrierwave%20-%20GitHub.png"></p>

<p>Then clone your fork locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Projects
</span><span class='line'>git clone git@github.com:hkarthik/carrierwave.git</span></code></pre></td></tr></table></div></figure>


<p>Next, point your application to your locally cloned Git repository for
your fork of the gem which contains the bug.</p>

<figure class='code'><figcaption><span>GemFile with cloned local directory here.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;~/Projects/carrierwave/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you&#8217;re all set to edit your local clone of the gem and fix it.</p>

<p>If you&#8217;re using your application to test your fix, you&#8217;ll need to run
&#8216;bundle update <gem name>&#8217; to rebundle the gem into your application
whenever you make changes.</p>

<p>Because this can sometimes be a slow process, I advise writing tests within the gem&#8217;s source code first before
bundling into your app for integration testing.</p>

<p>Once you&#8217;ve fixed the gem, you can commit your fix, and push to your fork on GitHub.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -am 'Fixing this gnarly bug'
</span><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure>


<p>Then you can modify your application&#8217;s GemFile and point to your GitHub
fork of the gem:</p>

<figure class='code'><figcaption><span>GemFile with git repo of forked gem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;carrierwave&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/hkarthik/carrierwave.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, you could continue to maintain your fork and keep it up to date
with the latest changes from the original gem&#8217;s repository. While you
can certainly choose to go this route, I would recommend contributing
back the fix with the eventual goal of deleting your fork.</p>

<h2>Contributing back</h2>

<p>So now that you&#8217;ve fixed the code in the gem, you&#8217;re back to cruising
along on your app. Why not make the fix available for anyone else using
the gem? GitHub makes this process easy.</p>

<p>Browse to your fork on GitHub and click the Pull Request button.</p>

<p><img src="http://f.cl.ly/items/2E0v1z2g3C2u1C1P1D0A/hkarthik_carrierwave%20-%20GitHub.png"></p>

<p>Fill in some details about the fix you&#8217;ve made. Submit the pull request and wait for feedback from the
project maintainers.  If they accept your pull request then your fix
will make it into the master repository instantly.</p>

<p>If your fix is accepted and later incorporated in the next published
version of the gem, I recommend moving your application back to the
published gem and deleting your fork on GitHub.</p>

<p>While you can leave your fork out there, if you&#8217;re not actively maintaining it, you&#8217;re likely to confuse anyone else looking
for the source code of the gem. Unmaintained forks are just unnecessary
noise on GitHub, and I don&#8217;t suggest keeping them around.</p>

<h2>Conclusion</h2>

<p>I hope this post gave you a good start on how to contribute to open source while
building applications in Ruby on Rails.</p>

<p>You don&#8217;t have to be an expert to start contributing to open source.
All you need is the right tools and a little bit of knowledge on how to
get started. It&#8217;s a great feeling to watch your first pull requests get accepted into
your favorite open source project and realize that you&#8217;ve just given back.</p>

<p>I&#8217;ve used a lot of open source in the past, but only recently have I
felt confident enough to start contributing back. I&#8217;m glad I did, as it&#8217;s great
feeling to give back in some small way to projects that have saved me countless hours
while building applications. I hope that I&#8217;ve inspired you to do the
same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Reasons for Leaving .NET]]></title>
    <link href="http://hkarthik.me/blog/2011/11/11/my-reasons-for-leaving-net/"/>
    <updated>2011-11-11T21:00:00-06:00</updated>
    <id>http://hkarthik.me/blog/2011/11/11/my-reasons-for-leaving-net</id>
    <content type="html"><![CDATA[<p>My current gig at Pure Charity is my first developer
role where the technical environment is not .NET.</p>

<p>After 6 years of .NET development work, I&#8217;ve decided to leave .NET and work in Ruby. My reasons
for making this change were largely technical but also reflected a
change in attitude about building software.</p>

<p>This post will be an in depth explanation of my reasons for leaving .NET.</p>

<h2>Back to Unix</h2>

<p>Working with Ruby on a day to day basis has rekindled my love for Unix.</p>

<p>The philosophy of Unix is usually summarized as:</p>

<blockquote><p>Write programs that do one thing and do it well.</p></blockquote>

<p>This concept really identifies with how I think about software that I
write and what makes my favorite software tools so great.</p>

<p>In college, most of my programming work was done on on Unix based systems.
While much has stayed the same on the Unix side in the last decade, my toolset has changed slightly.
Where I used to use Solaris/Linux, Emacs, and Bash, these days I use OSX, Vim, and Zsh, respectively.</p>

<p>Coming back to Unix was a big change from the Visual Studio focused
Windows development environment that I had used for the past 6 years.
But after a few months, I feel more productive than ever.</p>

<h2>Embracing Git</h2>

<p>Git has become one of my favorite software tools. While some may think of it
as just source control, for me it represents a different approach
to distributed work, experimentation, and simplicity around source code.</p>

<p>Combined with the use of GitHub as a collaborative tool, Git has simplified my entire workflow around
writing code, reviewing other people&#8217;s code, and utilizing Open Source.</p>

<p>Most of the Enterprise tools that the vast majority of .NET shops use to accomplish these things come with far too
much friction for my tastes. This friction leads to lots of wasted time,
more bugs, and lots of general frustration among the Agile teams that I&#8217;ve
worked with in the past.</p>

<h2>Switching to the Mac</h2>

<p>I purchased my first Mac in 2009 and I have found the hardware and the software
on the Mac to be simple, elegant, and easy to use.</p>

<p>The single biggest benefit to the Mac is that beneath the flashy hood, it&#8217;s a
powerful Unix-based OS and can utilize all the tooling and libraries
that Unix developers have used for decades. Coupled with the power of Unix and the
ability to run familar software with the GUI or through virtualization, there&#8217;s little reason for any developer to not consider moving to the
Mac.</p>

<p>Another benefit that I have found with the Mac is that it requires far less baby-sitting of the Operating System in the way of
driver updates, OS updates, and general system administration. By
simplifying all of these tasks, the Mac has allowed me to focus more on consuming and
creating content rather than constantly tweaking my OS or worrying about
the latest update.</p>

<p>While some enjoy the tweaking, as I did in the past, I no longer enjoy spending my time that way. I now prefer
my OS to stay out of my way so I can focus on perfecting my craft
and building things.</p>

<h2>Deploying to the Linux based Cloud</h2>

<p>Many companies today are starting to move away from self hosted infrastructure and are instead deploying to Amazon EC2 or to other cloud
based hosting providers. Such public clouds are built on top of the
virtualization layers and foundations provided by Linux.</p>

<p>Unix based Operating Systems provide far more system level
configuration, setup, and automation via the shell. These types of administrative tasks most often
are done via GUIs in Windows, making things more inefficient by
requiring more dedicated personnel to manage environments.</p>

<p>With Azure and other efforts, Microsoft is making efforts to address these short comings with Windows Server. But to me it makes
little sense to pay exorbitant license fees for immature and less elegant solutions
to manage cloud-based server infrastructure.</p>

<h2>Joining the Ruby Community</h2>

<p>I&#8217;ve always admired the Ruby community and the hacker focused culture around it.
Open Source is at the heart of this community and reputations are built upon significant open
source contributions. You&#8217;d be hard pressed to find a Rubyist speaker who
doesn&#8217;t put their code out there for the world to see and critique. This
makes the whole community feel more genuine.</p>

<p>The Ruby conference talks are more often in a show and tell format. Rarely
do I feel that the speaker is attempting to sell me on something or
further their personal branding. The .NET community tends to have a
strong vendor focus along with lots of self promotion at the speaker
level. It&#8217;s been refreshing to see less of this in the Ruby community.</p>

<p>The Ruby community also feels more self sufficient than the .NET community, since Rubyists don&#8217;t
look to a vendor to direct their technology stack. Many .NET developers
will not approach a technology unless there is a Microsoft flavor of
said technology, even if it is the poorer choice compared to mature open source offerings.
There are countless examples of this over the last decade, and I expect to see countless more.</p>

<h2>Working at Startups</h2>

<p>After a few years of working with Enterprise Software companies, I realized that I&#8217;m better
suited to work with startups. I prefer new product development over
legacy software maintenance, and it&#8217;s very difficult to find such opportunities inside traditional
Enterprises without political maneuvering and a lot of luck.</p>

<p>In a startup, there is usually a lot more room for an individual to
experiment and take ownership of an idea without getting too deep into
internal politics and bureaucracy.</p>

<p>Unfortunately, startups are less likely to use .NET technologies due to its higher costs. To be fair, Microsoft has
made efforts to reduce costs for startups through the Bizspark program. But after 3 years, a startup is still subject to
very high licensing costs and has to strategically plan to pay for them or migrate off .NET. Given the choice, I don&#8217;t know many startup
founders that would choose .NET for new ventures today.</p>

<p>Additionally, there is a perception that .NET developers are too specialized
to be effective generalists. Since I specialized in .NET for the past 6 years, this severely limited my
options when seeking to work with startups.</p>

<h2>Specialization is for Insects</h2>

<p>My journey away from Windows and .NET has been around 2 years in the
making, beginning with my purchasing a Mac and making a concerted effort
to build a product using Ruby on Rails.</p>

<p>It&#8217;s been a long and hard road to get here, but I received a lot of support from my friends
and former coworkers who similarly left .NET recently. For their help, I am eternally grateful.</p>

<p>I&#8217;ve definitely had to make sacrifices to get here, including a loss of
seniority, but I&#8217;m confident that I made the right choice and that these
sacrifices will be well worth it in the long run.</p>

<p>In the future, rather than specialize solely in Ruby, I&#8217;ve
chosen to grow more as a generalist developer. In the coming years, I&#8217;m looking
to tackle other technologies like Node.js, Scala, Clojure, iOS, and
Android.</p>

<p>I don&#8217;t regret my time in .NET, as I made lots of wonderful friends and
got the chance to work with some very smart folks. But it&#8217;s
time to move on to other things. I look forward to sharing more of my
journey with you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Fresh Start on a Static Site]]></title>
    <link href="http://hkarthik.me/blog/2011/11/06/a-fresh-start-on-a-static-site/"/>
    <updated>2011-11-06T10:18:00-06:00</updated>
    <id>http://hkarthik.me/blog/2011/11/06/a-fresh-start-on-a-static-site</id>
    <content type="html"><![CDATA[<p>I&#8217;ve decided to move my blog to a new domain and use a static site
generator to serve up the content. Since the content doesn&#8217;t change
much, it makes little sense to continue using Wordpress on a shared
web hosting plan with limited resources.</p>

<h2>Static Sites Are Fast</h2>

<p>A static site significantly reduces the overhead of disk I/O by
taking the relational database out of the picture. Most modern web
servers can be highly tuned to avoid disk access for static content by
utilizing output caching. If setup correctly, the fast majority
of web requests require zero disk I/O. This allows the web server to
serve content faster and handle larger loads with less resources.</p>

<p>While it is possible to use Wordpress Plugins like SuperCache to reduce
disk I/O, it still requires a Fast CGI process to serve the content via
PHP. This incurs enough CPU usage to make it slower than a pure static site.</p>

<h2>Easy cloud based hosting and scaling</h2>

<p>While a typical shared hosting setup works most of the time, it
does carry the possibility of a popular post bringing your hosting
to its knees. Planning for this kind of event carries a lot of
cost which will go unused most of the time.</p>

<p>Cloud based hosting platforms, like <a href="http://www.heroku.com">Heroku</a>,
are perfectly suited for hosting static sites that can be scaled up very easily.
Heroku&#8217;s free plan goes a long way and would likely handle the vast majority of
traffic, but still give you the ability to use push button scaling for those rare
instances when a post hits the #1 page of <a href="http://news.ycombinator.com">Hacker News</a>.</p>

<h2>Choosing a static site generator</h2>

<p>There a number of static site generators that will perform the basic
operations of translating posts that are written in
<a href="http://daringfireball.net/projects/markdown/">Markdown</a>
into HTML and organizing the output along with any uploaded media.</p>

<p>I chose to go with <a href="http://octopress.org">Octopress</a> because it
offered the following:</p>

<ul>
<li>Ruby based and easily customizable with plugins.</li>
<li>Easily configured to work with Heroku.</li>
<li>Stylesheets are written in <a href="http://thesassway.com/">Sass</a>.</li>
<li>Excellent typography out of the box with the base theme.</li>
<li>Sits on top of <a href="http://github.com/mojombo/jekyll">Jekyll</a>, and
can utilize many existing plugins.</li>
<li>Easy local preview with a built in Rack server.</li>
</ul>


<h2>Migrating old content</h2>

<p>I&#8217;ve chosen to move my old wordpress install over to wordpress.com&#8217;s
free plan for archival purposes rather than attempt a content migration.
But if you want to preserve your old content and links, there is a
Wordpress to Jekyll migrating tool called
<a href="http://github.com/thomasf/exitwp">ExitWP</a> that many have used
successfully. Also, you can utilize a rack server to execute code to handle redirects.</p>

<h2>Additional Resources</h2>

<ul>
<li><a href="http://inessential.com/2011/03/16/a_plea_for_baked_weblogs">A plea for baked weblogs</a></li>
<li><a href="http://mattgemmell.com/2011/09/12/blogging-with-octopress/">Matt Gemmell&#8217;s post on blogging with Octopress</a></li>
<li><a href="http://www.scottw.com/moving-to-octopress">Scott Watermasysk&#8217;s post on Octopress with Heroku</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
